<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
#region Copyright (c) 2011 Atif Aziz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#endregion

namespace Eggado
{
    #region Imports

    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Common;
    using System.Threading.Tasks;

    #endregion

    // This partial implementation was template-generated:
    // <#= DateTime.UtcNow.ToString("r", CultureInfo.InvariantCulture) #>

    partial class DataReaderExtensions
    {<#
    var targz = from arity in Enumerable.Range(1, 16)
                let ts = from n in Enumerable.Range(1, arity)
                         select "T" + (arity > 1 ? n.ToString(CultureInfo.InvariantCulture) : string.Empty)
                select "<" + string.Join(", ", ts) + ", TResult>";

    foreach (var targs in targz)
    { #>

        public static Func<IDataRecord, TResult>
            CreateRecordSelector<#= targs #>(
                this IDataReader reader,
                Func<#= targs #> selector)
        {
            var f = reader.CreateRecordSelector<Func<IDataRecord, Func<#= targs #>, TResult>>(selector);
            return record => f(record, selector);
        }

        public static IEnumerator<TResult> Select<#= targs #>(
            this IDataReader reader,
            Func<#= targs #> selector)
        {
            var f = reader.CreateRecordSelector(selector);
            while (reader.Read())
                yield return f(reader);
        }

        public static async Task<TResult[]> ReadAllAsync<#= targs #>(
            this DbDataReader reader,
            Func<#= targs #> selector) =>
            (await reader.CollectAsync(new List<TResult>(), selector).ConfigureAwait(false)).ToArray();

        public static async Task<TCollection> CollectAsync<TCollection, <#= targs.Substring(1) #>(
            this DbDataReader reader, TCollection collection,
            Func<#= targs #> selector)
            where TCollection : ICollection<TResult>
        {
            if (reader == null) throw new ArgumentNullException(nameof(reader));
            if (collection == null) throw new ArgumentNullException(nameof(collection));
            if (selector == null) throw new ArgumentNullException(nameof(selector));

            var f = reader.CreateRecordSelector(selector);
            while (await reader.ReadAsync().ConfigureAwait(false))
                collection.Add(f(reader));
            return collection;
        }
<#  }#>
    }

    partial class DbCommandExtensions
    {<#
    foreach (var targs in targz)
    { #>

        public static IEnumerable<TResult> Select<#= targs #>(
            this IDbCommand command,
            Func<#= targs #> selector)
        {
            if (command == null) throw new ArgumentNullException(nameof(command));
            if (selector == null) throw new ArgumentNullException(nameof(selector));

            return Eggnumerable.From(command.ExecuteReader, r => r.Select(selector));
        }

        public static async Task<TResult[]> ReadAllAsync<#= targs #>(
            this DbCommand command,
            Func<#= targs #> selector) =>
            (await command.CollectAsync(new List<TResult>(), selector).ConfigureAwait(false)).ToArray();

        public static async Task<TCollection> CollectAsync<TCollection, <#= targs.Substring(1) #>(
            this DbCommand command, TCollection collection,
            Func<#= targs #> selector)
            where TCollection : ICollection<TResult>
        {
            if (command == null) throw new ArgumentNullException(nameof(command));
            if (collection == null) throw new ArgumentNullException(nameof(collection));
            if (selector == null) throw new ArgumentNullException(nameof(selector));

            using (var reader = await command.ExecuteReaderAsync()
                                             .ConfigureAwait(false))
            {
                var f = reader.CreateRecordSelector(selector);
                while (await reader.ReadAsync().ConfigureAwait(false))
                    collection.Add(f(reader));
                return collection;
            }
        }
<#  }#>
    }

    partial class DataTableExtensions
    {<#
    foreach (var targs in targz) { #>

        public static IEnumerable<TResult> Select<#= targs #>(
            this DataTable table,
            Func<#= targs #> selector)
        {
            if (table == null) throw new ArgumentNullException(nameof(table));
            if (selector == null) throw new ArgumentNullException(nameof(selector));

            return Eggnumerable.From(table.CreateDataReader, r => r.Select(selector));
        }
<#  }#>
    }
}

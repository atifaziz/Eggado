namespace Eggado.Tests
{
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    // This partial implementation was template-generated:
    // Mon, 24 Feb 2020 13:48:37 GMT

    partial class DataReaderExtensionTests
    {
        static bool AssertProduct(Product p, ref int i)
        {
            switch (i++)
            {
                case 0:
                    Assert.AreEqual(1, p.ProductId);
                    Assert.AreEqual("Chai", p.ProductName);
                    Assert.AreEqual("Dharamsala Tea", p.EnglishName);
                    Assert.AreEqual("10 boxes x 20 bags", p.QuantityPerUnit);
                    Assert.AreEqual(18m, p.UnitPrice);
                    Assert.AreEqual(39, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(10, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Exotic Liquids", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 1:
                    Assert.AreEqual(2, p.ProductId);
                    Assert.AreEqual("Chang", p.ProductName);
                    Assert.AreEqual("Tibetan Barley Beer", p.EnglishName);
                    Assert.AreEqual("24 - 12 oz bottles", p.QuantityPerUnit);
                    Assert.AreEqual(19m, p.UnitPrice);
                    Assert.AreEqual(17, p.UnitsInStock);
                    Assert.AreEqual(40, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Exotic Liquids", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 2:
                    Assert.AreEqual(24, p.ProductId);
                    Assert.AreEqual("Guaran\u00e1 Fant\u00e1stica", p.ProductName);
                    Assert.AreEqual("Guaran\u00e1 Fant\u00e1stica Soft Drink", p.EnglishName);
                    Assert.AreEqual("12 - 355 ml cans", p.QuantityPerUnit);
                    Assert.AreEqual(4.5m, p.UnitPrice);
                    Assert.AreEqual(20, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(true, p.Discontinued);
                    Assert.AreEqual("Refrescos Americanas LTDA", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 3:
                    Assert.AreEqual(34, p.ProductId);
                    Assert.AreEqual("Sasquatch Ale", p.ProductName);
                    Assert.AreEqual("Sasquatch Ale", p.EnglishName);
                    Assert.AreEqual("24 - 12 oz bottles", p.QuantityPerUnit);
                    Assert.AreEqual(14m, p.UnitPrice);
                    Assert.AreEqual(111, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(15, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Bigfoot Breweries", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 4:
                    Assert.AreEqual(35, p.ProductId);
                    Assert.AreEqual("Steeleye Stout", p.ProductName);
                    Assert.AreEqual("Steeleye Stout", p.EnglishName);
                    Assert.AreEqual("24 - 12 oz bottles", p.QuantityPerUnit);
                    Assert.AreEqual(18m, p.UnitPrice);
                    Assert.AreEqual(20, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(15, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Bigfoot Breweries", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 5:
                    Assert.AreEqual(38, p.ProductId);
                    Assert.AreEqual("C\u00f4te de Blaye", p.ProductName);
                    Assert.AreEqual("C\u00f4te de Blaye (Red Bordeaux wine)", p.EnglishName);
                    Assert.AreEqual("12 - 75 cl bottles", p.QuantityPerUnit);
                    Assert.AreEqual(263.5m, p.UnitPrice);
                    Assert.AreEqual(17, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(15, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Aux joyeux eccl\u00e9siastiques", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 6:
                    Assert.AreEqual(39, p.ProductId);
                    Assert.AreEqual("Chartreuse verte", p.ProductName);
                    Assert.AreEqual("Green Chartreuse (Liqueur)", p.EnglishName);
                    Assert.AreEqual("750 cc per bottle", p.QuantityPerUnit);
                    Assert.AreEqual(18m, p.UnitPrice);
                    Assert.AreEqual(69, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(5, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Aux joyeux eccl\u00e9siastiques", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 7:
                    Assert.AreEqual(43, p.ProductId);
                    Assert.AreEqual("Ipoh Coffee", p.ProductName);
                    Assert.AreEqual("Malaysian Coffee", p.EnglishName);
                    Assert.AreEqual("16 - 500 g tins", p.QuantityPerUnit);
                    Assert.AreEqual(46m, p.UnitPrice);
                    Assert.AreEqual(17, p.UnitsInStock);
                    Assert.AreEqual(10, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Leka Trading", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 8:
                    Assert.AreEqual(67, p.ProductId);
                    Assert.AreEqual("Laughing Lumberjack Lager", p.ProductName);
                    Assert.AreEqual("Laughing Lumberjack Lager", p.EnglishName);
                    Assert.AreEqual("24 - 12 oz bottles", p.QuantityPerUnit);
                    Assert.AreEqual(14m, p.UnitPrice);
                    Assert.AreEqual(52, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(10, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Bigfoot Breweries", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 9:
                    Assert.AreEqual(70, p.ProductId);
                    Assert.AreEqual("Outback Lager", p.ProductName);
                    Assert.AreEqual("Outback Lager", p.EnglishName);
                    Assert.AreEqual("24 - 355 ml bottles", p.QuantityPerUnit);
                    Assert.AreEqual(15m, p.UnitPrice);
                    Assert.AreEqual(15, p.UnitsInStock);
                    Assert.AreEqual(10, p.UnitsOnOrder);
                    Assert.AreEqual(30, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Pavlova, Ltd.", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 10:
                    Assert.AreEqual(75, p.ProductId);
                    Assert.AreEqual("Rh\u00f6nbr\u00e4u Klosterbier", p.ProductName);
                    Assert.AreEqual("Rh\u00f6nbr\u00e4u Beer", p.EnglishName);
                    Assert.AreEqual("24 - 0.5 l bottles", p.QuantityPerUnit);
                    Assert.AreEqual(7.75m, p.UnitPrice);
                    Assert.AreEqual(125, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Plusspar Lebensmittelgro\u00dfm\u00e4rkte AG", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 11:
                    Assert.AreEqual(76, p.ProductId);
                    Assert.AreEqual("Lakkalik\u00f6\u00f6ri", p.ProductName);
                    Assert.AreEqual("Cloudberry Liqueur", p.EnglishName);
                    Assert.AreEqual("500 ml", p.QuantityPerUnit);
                    Assert.AreEqual(18m, p.UnitPrice);
                    Assert.AreEqual(57, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(20, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Karkki Oy", p.Supplier);
                    Assert.AreEqual("Beverages", p.Category);
                    return true;
                case 12:
                    Assert.AreEqual(3, p.ProductId);
                    Assert.AreEqual("Aniseed Syrup", p.ProductName);
                    Assert.AreEqual("Licorice Syrup", p.EnglishName);
                    Assert.AreEqual("12 - 550 ml bottles", p.QuantityPerUnit);
                    Assert.AreEqual(10m, p.UnitPrice);
                    Assert.AreEqual(13, p.UnitsInStock);
                    Assert.AreEqual(70, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Exotic Liquids", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 13:
                    Assert.AreEqual(4, p.ProductId);
                    Assert.AreEqual("Chef Anton's Cajun Seasoning", p.ProductName);
                    Assert.AreEqual("Chef Anton's Cajun Seasoning", p.EnglishName);
                    Assert.AreEqual("48 - 6 oz jars", p.QuantityPerUnit);
                    Assert.AreEqual(22m, p.UnitPrice);
                    Assert.AreEqual(53, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("New Orleans Cajun Delights", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 14:
                    Assert.AreEqual(5, p.ProductId);
                    Assert.AreEqual("Chef Anton's Gumbo Mix", p.ProductName);
                    Assert.AreEqual("Chef Anton's Gumbo Mix", p.EnglishName);
                    Assert.AreEqual("36 boxes", p.QuantityPerUnit);
                    Assert.AreEqual(21.35m, p.UnitPrice);
                    Assert.AreEqual(0, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(true, p.Discontinued);
                    Assert.AreEqual("New Orleans Cajun Delights", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 15:
                    Assert.AreEqual(6, p.ProductId);
                    Assert.AreEqual("Grandma's Boysenberry Spread", p.ProductName);
                    Assert.AreEqual("Grandma's Boysenberry Spread", p.EnglishName);
                    Assert.AreEqual("12 - 8 oz jars", p.QuantityPerUnit);
                    Assert.AreEqual(25m, p.UnitPrice);
                    Assert.AreEqual(120, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Grandma Kelly's Homestead", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 16:
                    Assert.AreEqual(8, p.ProductId);
                    Assert.AreEqual("Northwoods Cranberry Sauce", p.ProductName);
                    Assert.AreEqual("Northwoods Cranberry Sauce", p.EnglishName);
                    Assert.AreEqual("12 - 12 oz jars", p.QuantityPerUnit);
                    Assert.AreEqual(40m, p.UnitPrice);
                    Assert.AreEqual(6, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Grandma Kelly's Homestead", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 17:
                    Assert.AreEqual(15, p.ProductId);
                    Assert.AreEqual("Genen Shouyu", p.ProductName);
                    Assert.AreEqual("Lite Sodium Soy Sauce", p.EnglishName);
                    Assert.AreEqual("24 - 250 ml bottles", p.QuantityPerUnit);
                    Assert.AreEqual(15.5m, p.UnitPrice);
                    Assert.AreEqual(39, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(5, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Mayumi's", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 18:
                    Assert.AreEqual(44, p.ProductId);
                    Assert.AreEqual("Gula Malacca", p.ProductName);
                    Assert.AreEqual("Malacca Dark Brown Sugar", p.EnglishName);
                    Assert.AreEqual("20 - 2 kg bags", p.QuantityPerUnit);
                    Assert.AreEqual(19.45m, p.UnitPrice);
                    Assert.AreEqual(27, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(15, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Leka Trading", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 19:
                    Assert.AreEqual(61, p.ProductId);
                    Assert.AreEqual("Sirop d'\u00e9rable", p.ProductName);
                    Assert.AreEqual("Maple Syrup", p.EnglishName);
                    Assert.AreEqual("24 - 500 ml bottles", p.QuantityPerUnit);
                    Assert.AreEqual(28.5m, p.UnitPrice);
                    Assert.AreEqual(113, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("For\u00eats d'\u00e9rables", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 20:
                    Assert.AreEqual(63, p.ProductId);
                    Assert.AreEqual("Vegie-spread", p.ProductName);
                    Assert.AreEqual("Vegetable Sandwich Spread", p.EnglishName);
                    Assert.AreEqual("15 - 625 g jars", p.QuantityPerUnit);
                    Assert.AreEqual(43.9m, p.UnitPrice);
                    Assert.AreEqual(24, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(5, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Pavlova, Ltd.", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 21:
                    Assert.AreEqual(65, p.ProductId);
                    Assert.AreEqual("Louisiana Fiery Hot Pepper Sauce", p.ProductName);
                    Assert.AreEqual("Louisiana Fiery Hot Pepper Sauce", p.EnglishName);
                    Assert.AreEqual("32 - 8 oz bottles", p.QuantityPerUnit);
                    Assert.AreEqual(21.05m, p.UnitPrice);
                    Assert.AreEqual(76, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("New Orleans Cajun Delights", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 22:
                    Assert.AreEqual(66, p.ProductId);
                    Assert.AreEqual("Louisiana Hot Spiced Okra", p.ProductName);
                    Assert.AreEqual("Louisiana Hot Spiced Okra", p.EnglishName);
                    Assert.AreEqual("24 - 8 oz jars", p.QuantityPerUnit);
                    Assert.AreEqual(17m, p.UnitPrice);
                    Assert.AreEqual(4, p.UnitsInStock);
                    Assert.AreEqual(100, p.UnitsOnOrder);
                    Assert.AreEqual(20, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("New Orleans Cajun Delights", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 23:
                    Assert.AreEqual(77, p.ProductId);
                    Assert.AreEqual("Original Frankfurter gr\u00fcne So\u00dfe", p.ProductName);
                    Assert.AreEqual("Original Frankfurter Green Sauce", p.EnglishName);
                    Assert.AreEqual("12 boxes", p.QuantityPerUnit);
                    Assert.AreEqual(13m, p.UnitPrice);
                    Assert.AreEqual(32, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(15, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Plusspar Lebensmittelgro\u00dfm\u00e4rkte AG", p.Supplier);
                    Assert.AreEqual("Condiments", p.Category);
                    return true;
                case 24:
                    Assert.AreEqual(16, p.ProductId);
                    Assert.AreEqual("Pavlova", p.ProductName);
                    Assert.AreEqual("Pavlova Meringue Dessert", p.EnglishName);
                    Assert.AreEqual("32 - 500 g boxes", p.QuantityPerUnit);
                    Assert.AreEqual(17.45m, p.UnitPrice);
                    Assert.AreEqual(29, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(10, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Pavlova, Ltd.", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 25:
                    Assert.AreEqual(19, p.ProductId);
                    Assert.AreEqual("Teatime Chocolate Biscuits", p.ProductName);
                    Assert.AreEqual("Teatime Chocolate Biscuits", p.EnglishName);
                    Assert.AreEqual("10 boxes x 12 pieces", p.QuantityPerUnit);
                    Assert.AreEqual(9.2m, p.UnitPrice);
                    Assert.AreEqual(25, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(5, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Specialty Biscuits, Ltd.", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 26:
                    Assert.AreEqual(20, p.ProductId);
                    Assert.AreEqual("Sir Rodney's Marmalade", p.ProductName);
                    Assert.AreEqual("Sir Rodney's Marmalade", p.EnglishName);
                    Assert.AreEqual("30 gift boxes", p.QuantityPerUnit);
                    Assert.AreEqual(81m, p.UnitPrice);
                    Assert.AreEqual(40, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Specialty Biscuits, Ltd.", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 27:
                    Assert.AreEqual(21, p.ProductId);
                    Assert.AreEqual("Sir Rodney's Scones", p.ProductName);
                    Assert.AreEqual("Sir Rodney's Scones", p.EnglishName);
                    Assert.AreEqual("24 pkgs. x 4 pieces", p.QuantityPerUnit);
                    Assert.AreEqual(10m, p.UnitPrice);
                    Assert.AreEqual(3, p.UnitsInStock);
                    Assert.AreEqual(40, p.UnitsOnOrder);
                    Assert.AreEqual(5, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Specialty Biscuits, Ltd.", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 28:
                    Assert.AreEqual(25, p.ProductId);
                    Assert.AreEqual("NuNuCa Nu\u00df-Nougat-Creme", p.ProductName);
                    Assert.AreEqual("NuNuCa Chocolate-Nut Spread", p.EnglishName);
                    Assert.AreEqual("20 - 450 g glasses", p.QuantityPerUnit);
                    Assert.AreEqual(14m, p.UnitPrice);
                    Assert.AreEqual(76, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(30, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Heli S\u00fc\u00dfwaren GmbH & Co. KG", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 29:
                    Assert.AreEqual(26, p.ProductId);
                    Assert.AreEqual("Gumb\u00e4r Gummib\u00e4rchen", p.ProductName);
                    Assert.AreEqual("Gumb\u00e4r Gummy Bears", p.EnglishName);
                    Assert.AreEqual("100 - 250 g bags", p.QuantityPerUnit);
                    Assert.AreEqual(31.23m, p.UnitPrice);
                    Assert.AreEqual(15, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Heli S\u00fc\u00dfwaren GmbH & Co. KG", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 30:
                    Assert.AreEqual(27, p.ProductId);
                    Assert.AreEqual("Schoggi Schokolade", p.ProductName);
                    Assert.AreEqual("Schoggi Chocolate", p.EnglishName);
                    Assert.AreEqual("100 - 100 g pieces", p.QuantityPerUnit);
                    Assert.AreEqual(43.9m, p.UnitPrice);
                    Assert.AreEqual(49, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(30, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Heli S\u00fc\u00dfwaren GmbH & Co. KG", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 31:
                    Assert.AreEqual(47, p.ProductId);
                    Assert.AreEqual("Zaanse koeken", p.ProductName);
                    Assert.AreEqual("Zaanse Cookies", p.EnglishName);
                    Assert.AreEqual("10 - 4 oz boxes", p.QuantityPerUnit);
                    Assert.AreEqual(9.5m, p.UnitPrice);
                    Assert.AreEqual(36, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Zaanse Snoepfabriek", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 32:
                    Assert.AreEqual(48, p.ProductId);
                    Assert.AreEqual("Chocolade", p.ProductName);
                    Assert.AreEqual("Dutch Chocolate", p.EnglishName);
                    Assert.AreEqual("10 pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(12.75m, p.UnitPrice);
                    Assert.AreEqual(15, p.UnitsInStock);
                    Assert.AreEqual(70, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Zaanse Snoepfabriek", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 33:
                    Assert.AreEqual(49, p.ProductId);
                    Assert.AreEqual("Maxilaku", p.ProductName);
                    Assert.AreEqual("Licorice", p.EnglishName);
                    Assert.AreEqual("24 - 50 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(20m, p.UnitPrice);
                    Assert.AreEqual(10, p.UnitsInStock);
                    Assert.AreEqual(60, p.UnitsOnOrder);
                    Assert.AreEqual(15, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Karkki Oy", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 34:
                    Assert.AreEqual(50, p.ProductId);
                    Assert.AreEqual("Valkoinen suklaa", p.ProductName);
                    Assert.AreEqual("White Chocolate", p.EnglishName);
                    Assert.AreEqual("12 - 100 g bars", p.QuantityPerUnit);
                    Assert.AreEqual(16.25m, p.UnitPrice);
                    Assert.AreEqual(65, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(30, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Karkki Oy", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 35:
                    Assert.AreEqual(62, p.ProductId);
                    Assert.AreEqual("Tarte au sucre", p.ProductName);
                    Assert.AreEqual("Sugar Pie", p.EnglishName);
                    Assert.AreEqual("48 pies", p.QuantityPerUnit);
                    Assert.AreEqual(49.3m, p.UnitPrice);
                    Assert.AreEqual(17, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("For\u00eats d'\u00e9rables", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 36:
                    Assert.AreEqual(68, p.ProductId);
                    Assert.AreEqual("Scottish Longbreads", p.ProductName);
                    Assert.AreEqual("Scottish Longbreads", p.EnglishName);
                    Assert.AreEqual("10 boxes x 8 pieces", p.QuantityPerUnit);
                    Assert.AreEqual(12.5m, p.UnitPrice);
                    Assert.AreEqual(6, p.UnitsInStock);
                    Assert.AreEqual(10, p.UnitsOnOrder);
                    Assert.AreEqual(15, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Specialty Biscuits, Ltd.", p.Supplier);
                    Assert.AreEqual("Confections", p.Category);
                    return true;
                case 37:
                    Assert.AreEqual(11, p.ProductId);
                    Assert.AreEqual("Queso Cabrales", p.ProductName);
                    Assert.AreEqual("Cabrales Cheese", p.EnglishName);
                    Assert.AreEqual("1 kg pkg.", p.QuantityPerUnit);
                    Assert.AreEqual(21m, p.UnitPrice);
                    Assert.AreEqual(22, p.UnitsInStock);
                    Assert.AreEqual(30, p.UnitsOnOrder);
                    Assert.AreEqual(30, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Cooperativa de Quesos 'Las Cabras'", p.Supplier);
                    Assert.AreEqual("Dairy Products", p.Category);
                    return true;
                case 38:
                    Assert.AreEqual(12, p.ProductId);
                    Assert.AreEqual("Queso Manchego La Pastora", p.ProductName);
                    Assert.AreEqual("Manchego La Pastora Cheese", p.EnglishName);
                    Assert.AreEqual("10 - 500 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(38m, p.UnitPrice);
                    Assert.AreEqual(86, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Cooperativa de Quesos 'Las Cabras'", p.Supplier);
                    Assert.AreEqual("Dairy Products", p.Category);
                    return true;
                case 39:
                    Assert.AreEqual(31, p.ProductId);
                    Assert.AreEqual("Gorgonzola Telino", p.ProductName);
                    Assert.AreEqual("Gorgonzola Telino", p.EnglishName);
                    Assert.AreEqual("12 - 100 g pkgs", p.QuantityPerUnit);
                    Assert.AreEqual(12.5m, p.UnitPrice);
                    Assert.AreEqual(0, p.UnitsInStock);
                    Assert.AreEqual(70, p.UnitsOnOrder);
                    Assert.AreEqual(20, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Formaggi Fortini s.r.l.", p.Supplier);
                    Assert.AreEqual("Dairy Products", p.Category);
                    return true;
                case 40:
                    Assert.AreEqual(32, p.ProductId);
                    Assert.AreEqual("Mascarpone Fabioli", p.ProductName);
                    Assert.AreEqual("Mascarpone Fabioli", p.EnglishName);
                    Assert.AreEqual("24 - 200 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(32m, p.UnitPrice);
                    Assert.AreEqual(9, p.UnitsInStock);
                    Assert.AreEqual(40, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Formaggi Fortini s.r.l.", p.Supplier);
                    Assert.AreEqual("Dairy Products", p.Category);
                    return true;
                case 41:
                    Assert.AreEqual(33, p.ProductId);
                    Assert.AreEqual("Geitost", p.ProductName);
                    Assert.AreEqual("Goat Cheese", p.EnglishName);
                    Assert.AreEqual("500 g", p.QuantityPerUnit);
                    Assert.AreEqual(2.5m, p.UnitPrice);
                    Assert.AreEqual(112, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(20, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Norske Meierier", p.Supplier);
                    Assert.AreEqual("Dairy Products", p.Category);
                    return true;
                case 42:
                    Assert.AreEqual(59, p.ProductId);
                    Assert.AreEqual("Raclette Courdavault", p.ProductName);
                    Assert.AreEqual("Courdavault Raclette Cheese", p.EnglishName);
                    Assert.AreEqual("5 kg pkg.", p.QuantityPerUnit);
                    Assert.AreEqual(55m, p.UnitPrice);
                    Assert.AreEqual(79, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Gai p\u00e2turage", p.Supplier);
                    Assert.AreEqual("Dairy Products", p.Category);
                    return true;
                case 43:
                    Assert.AreEqual(60, p.ProductId);
                    Assert.AreEqual("Camembert Pierrot", p.ProductName);
                    Assert.AreEqual("Pierrot Camembert", p.EnglishName);
                    Assert.AreEqual("15 - 300 g rounds", p.QuantityPerUnit);
                    Assert.AreEqual(34m, p.UnitPrice);
                    Assert.AreEqual(19, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Gai p\u00e2turage", p.Supplier);
                    Assert.AreEqual("Dairy Products", p.Category);
                    return true;
                case 44:
                    Assert.AreEqual(69, p.ProductId);
                    Assert.AreEqual("Gudbrandsdalsost", p.ProductName);
                    Assert.AreEqual("Gudbrandsdals Cheese", p.EnglishName);
                    Assert.AreEqual("10 kg pkg.", p.QuantityPerUnit);
                    Assert.AreEqual(36m, p.UnitPrice);
                    Assert.AreEqual(26, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(15, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Norske Meierier", p.Supplier);
                    Assert.AreEqual("Dairy Products", p.Category);
                    return true;
                case 45:
                    Assert.AreEqual(71, p.ProductId);
                    Assert.AreEqual("Fl\u00f8temysost", p.ProductName);
                    Assert.AreEqual("Fl\u00f8temys Cream Cheese", p.EnglishName);
                    Assert.AreEqual("10 - 500 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(21.5m, p.UnitPrice);
                    Assert.AreEqual(26, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Norske Meierier", p.Supplier);
                    Assert.AreEqual("Dairy Products", p.Category);
                    return true;
                case 46:
                    Assert.AreEqual(72, p.ProductId);
                    Assert.AreEqual("Mozzarella di Giovanni", p.ProductName);
                    Assert.AreEqual("Giovanni's Mozzarella", p.EnglishName);
                    Assert.AreEqual("24 - 200 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(34.8m, p.UnitPrice);
                    Assert.AreEqual(14, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Formaggi Fortini s.r.l.", p.Supplier);
                    Assert.AreEqual("Dairy Products", p.Category);
                    return true;
                case 47:
                    Assert.AreEqual(22, p.ProductId);
                    Assert.AreEqual("Gustaf's Kn\u00e4ckebr\u00f6d", p.ProductName);
                    Assert.AreEqual("Gustaf's Rye Crisp Bread", p.EnglishName);
                    Assert.AreEqual("24 - 500 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(21m, p.UnitPrice);
                    Assert.AreEqual(104, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("PB Kn\u00e4ckebr\u00f6d AB", p.Supplier);
                    Assert.AreEqual("Grains/Cereals", p.Category);
                    return true;
                case 48:
                    Assert.AreEqual(23, p.ProductId);
                    Assert.AreEqual("Tunnbr\u00f6d", p.ProductName);
                    Assert.AreEqual("Thin Bread", p.EnglishName);
                    Assert.AreEqual("12 - 250 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(9m, p.UnitPrice);
                    Assert.AreEqual(61, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("PB Kn\u00e4ckebr\u00f6d AB", p.Supplier);
                    Assert.AreEqual("Grains/Cereals", p.Category);
                    return true;
                case 49:
                    Assert.AreEqual(42, p.ProductId);
                    Assert.AreEqual("Singaporean Hokkien Fried Mee", p.ProductName);
                    Assert.AreEqual("Singapore Noodles", p.EnglishName);
                    Assert.AreEqual("32 - 1 kg pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(14m, p.UnitPrice);
                    Assert.AreEqual(26, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(true, p.Discontinued);
                    Assert.AreEqual("Leka Trading", p.Supplier);
                    Assert.AreEqual("Grains/Cereals", p.Category);
                    return true;
                case 50:
                    Assert.AreEqual(52, p.ProductId);
                    Assert.AreEqual("Filo Mix", p.ProductName);
                    Assert.AreEqual("Mix for Greek Filo Dough", p.EnglishName);
                    Assert.AreEqual("16 - 2 kg boxes", p.QuantityPerUnit);
                    Assert.AreEqual(7m, p.UnitPrice);
                    Assert.AreEqual(38, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("G'day, Mate", p.Supplier);
                    Assert.AreEqual("Grains/Cereals", p.Category);
                    return true;
                case 51:
                    Assert.AreEqual(56, p.ProductId);
                    Assert.AreEqual("Gnocchi di nonna Alice", p.ProductName);
                    Assert.AreEqual("Gramma Alice's Dumplings", p.EnglishName);
                    Assert.AreEqual("24 - 250 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(38m, p.UnitPrice);
                    Assert.AreEqual(21, p.UnitsInStock);
                    Assert.AreEqual(10, p.UnitsOnOrder);
                    Assert.AreEqual(30, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Pasta Buttini s.r.l.", p.Supplier);
                    Assert.AreEqual("Grains/Cereals", p.Category);
                    return true;
                case 52:
                    Assert.AreEqual(57, p.ProductId);
                    Assert.AreEqual("Ravioli Angelo", p.ProductName);
                    Assert.AreEqual("Angelo Ravioli", p.EnglishName);
                    Assert.AreEqual("24 - 250 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(19.5m, p.UnitPrice);
                    Assert.AreEqual(36, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(20, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Pasta Buttini s.r.l.", p.Supplier);
                    Assert.AreEqual("Grains/Cereals", p.Category);
                    return true;
                case 53:
                    Assert.AreEqual(64, p.ProductId);
                    Assert.AreEqual("Wimmers gute Semmelkn\u00f6del", p.ProductName);
                    Assert.AreEqual("Wimmer's Delicious Bread Dumplings", p.EnglishName);
                    Assert.AreEqual("20 bags x 4 pieces", p.QuantityPerUnit);
                    Assert.AreEqual(33.25m, p.UnitPrice);
                    Assert.AreEqual(22, p.UnitsInStock);
                    Assert.AreEqual(80, p.UnitsOnOrder);
                    Assert.AreEqual(30, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Plusspar Lebensmittelgro\u00dfm\u00e4rkte AG", p.Supplier);
                    Assert.AreEqual("Grains/Cereals", p.Category);
                    return true;
                case 54:
                    Assert.AreEqual(9, p.ProductId);
                    Assert.AreEqual("Mishi Kobe Niku", p.ProductName);
                    Assert.AreEqual("Mishi Kobe Beef", p.EnglishName);
                    Assert.AreEqual("18 - 500 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(97m, p.UnitPrice);
                    Assert.AreEqual(29, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(true, p.Discontinued);
                    Assert.AreEqual("Tokyo Traders", p.Supplier);
                    Assert.AreEqual("Meat/Poultry", p.Category);
                    return true;
                case 55:
                    Assert.AreEqual(17, p.ProductId);
                    Assert.AreEqual("Alice Mutton", p.ProductName);
                    Assert.AreEqual("Alice Springs Lamb", p.EnglishName);
                    Assert.AreEqual("20 - 1 kg tins", p.QuantityPerUnit);
                    Assert.AreEqual(39m, p.UnitPrice);
                    Assert.AreEqual(0, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(true, p.Discontinued);
                    Assert.AreEqual("Pavlova, Ltd.", p.Supplier);
                    Assert.AreEqual("Meat/Poultry", p.Category);
                    return true;
                case 56:
                    Assert.AreEqual(29, p.ProductId);
                    Assert.AreEqual("Th\u00fcringer Rostbratwurst", p.ProductName);
                    Assert.AreEqual("Th\u00fcringer Sausage", p.EnglishName);
                    Assert.AreEqual("50 bags x 30 sausgs.", p.QuantityPerUnit);
                    Assert.AreEqual(123.79m, p.UnitPrice);
                    Assert.AreEqual(0, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(true, p.Discontinued);
                    Assert.AreEqual("Plusspar Lebensmittelgro\u00dfm\u00e4rkte AG", p.Supplier);
                    Assert.AreEqual("Meat/Poultry", p.Category);
                    return true;
                case 57:
                    Assert.AreEqual(53, p.ProductId);
                    Assert.AreEqual("Perth Pasties", p.ProductName);
                    Assert.AreEqual("Perth Meat Pies", p.EnglishName);
                    Assert.AreEqual("48 pieces", p.QuantityPerUnit);
                    Assert.AreEqual(32.8m, p.UnitPrice);
                    Assert.AreEqual(0, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(true, p.Discontinued);
                    Assert.AreEqual("G'day, Mate", p.Supplier);
                    Assert.AreEqual("Meat/Poultry", p.Category);
                    return true;
                case 58:
                    Assert.AreEqual(54, p.ProductId);
                    Assert.AreEqual("Tourti\u00e8re", p.ProductName);
                    Assert.AreEqual("Pork Pie", p.EnglishName);
                    Assert.AreEqual("16 pies", p.QuantityPerUnit);
                    Assert.AreEqual(7.45m, p.UnitPrice);
                    Assert.AreEqual(21, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(10, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Ma Maison", p.Supplier);
                    Assert.AreEqual("Meat/Poultry", p.Category);
                    return true;
                case 59:
                    Assert.AreEqual(55, p.ProductId);
                    Assert.AreEqual("P\u00e2t\u00e9 chinois", p.ProductName);
                    Assert.AreEqual("Shepard's Pie", p.EnglishName);
                    Assert.AreEqual("24 boxes x 2 pies", p.QuantityPerUnit);
                    Assert.AreEqual(24m, p.UnitPrice);
                    Assert.AreEqual(115, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(20, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Ma Maison", p.Supplier);
                    Assert.AreEqual("Meat/Poultry", p.Category);
                    return true;
                case 60:
                    Assert.AreEqual(7, p.ProductId);
                    Assert.AreEqual("Uncle Bob's Organic Dried Pears", p.ProductName);
                    Assert.AreEqual("Uncle Bob's Organic Dried Pears", p.EnglishName);
                    Assert.AreEqual("12 - 1 lb pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(30m, p.UnitPrice);
                    Assert.AreEqual(15, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(10, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Grandma Kelly's Homestead", p.Supplier);
                    Assert.AreEqual("Produce", p.Category);
                    return true;
                case 61:
                    Assert.AreEqual(14, p.ProductId);
                    Assert.AreEqual("Tofu", p.ProductName);
                    Assert.AreEqual("Bean Curd", p.EnglishName);
                    Assert.AreEqual("40 - 100 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(23.25m, p.UnitPrice);
                    Assert.AreEqual(35, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Mayumi's", p.Supplier);
                    Assert.AreEqual("Produce", p.Category);
                    return true;
                case 62:
                    Assert.AreEqual(28, p.ProductId);
                    Assert.AreEqual("R\u00f6ssle Sauerkraut", p.ProductName);
                    Assert.AreEqual("R\u00f6ssle Sauerkraut", p.EnglishName);
                    Assert.AreEqual("25 - 825 g cans", p.QuantityPerUnit);
                    Assert.AreEqual(45.6m, p.UnitPrice);
                    Assert.AreEqual(26, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(true, p.Discontinued);
                    Assert.AreEqual("Plusspar Lebensmittelgro\u00dfm\u00e4rkte AG", p.Supplier);
                    Assert.AreEqual("Produce", p.Category);
                    return true;
                case 63:
                    Assert.AreEqual(51, p.ProductId);
                    Assert.AreEqual("Manjimup Dried Apples", p.ProductName);
                    Assert.AreEqual("Manjimup Dried Apples", p.EnglishName);
                    Assert.AreEqual("50 - 300 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(53m, p.UnitPrice);
                    Assert.AreEqual(20, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(10, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("G'day, Mate", p.Supplier);
                    Assert.AreEqual("Produce", p.Category);
                    return true;
                case 64:
                    Assert.AreEqual(74, p.ProductId);
                    Assert.AreEqual("Longlife Tofu", p.ProductName);
                    Assert.AreEqual("Longlife Bean Curd", p.EnglishName);
                    Assert.AreEqual("5 kg pkg.", p.QuantityPerUnit);
                    Assert.AreEqual(10m, p.UnitPrice);
                    Assert.AreEqual(4, p.UnitsInStock);
                    Assert.AreEqual(20, p.UnitsOnOrder);
                    Assert.AreEqual(5, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Tokyo Traders", p.Supplier);
                    Assert.AreEqual("Produce", p.Category);
                    return true;
                case 65:
                    Assert.AreEqual(10, p.ProductId);
                    Assert.AreEqual("Ikura", p.ProductName);
                    Assert.AreEqual("Fish Roe", p.EnglishName);
                    Assert.AreEqual("12 - 200 ml jars", p.QuantityPerUnit);
                    Assert.AreEqual(31m, p.UnitPrice);
                    Assert.AreEqual(31, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Tokyo Traders", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return true;
                case 66:
                    Assert.AreEqual(13, p.ProductId);
                    Assert.AreEqual("Konbu", p.ProductName);
                    Assert.AreEqual("Kelp Seaweed", p.EnglishName);
                    Assert.AreEqual("2 kg box", p.QuantityPerUnit);
                    Assert.AreEqual(6m, p.UnitPrice);
                    Assert.AreEqual(24, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(5, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Mayumi's", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return true;
                case 67:
                    Assert.AreEqual(18, p.ProductId);
                    Assert.AreEqual("Carnarvon Tigers", p.ProductName);
                    Assert.AreEqual("Carnarvon Tiger Prawns", p.EnglishName);
                    Assert.AreEqual("16 kg pkg.", p.QuantityPerUnit);
                    Assert.AreEqual(62.5m, p.UnitPrice);
                    Assert.AreEqual(42, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Pavlova, Ltd.", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return true;
                case 68:
                    Assert.AreEqual(30, p.ProductId);
                    Assert.AreEqual("Nord-Ost Matjeshering", p.ProductName);
                    Assert.AreEqual("Nord-Ost White Herring", p.EnglishName);
                    Assert.AreEqual("10 - 200 g glasses", p.QuantityPerUnit);
                    Assert.AreEqual(25.89m, p.UnitPrice);
                    Assert.AreEqual(10, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(15, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Nord-Ost-Fisch Handelsgesellschaft mbH", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return true;
                case 69:
                    Assert.AreEqual(36, p.ProductId);
                    Assert.AreEqual("Inlagd Sill", p.ProductName);
                    Assert.AreEqual("Pickled Herring", p.EnglishName);
                    Assert.AreEqual("24 - 250 g  jars", p.QuantityPerUnit);
                    Assert.AreEqual(19m, p.UnitPrice);
                    Assert.AreEqual(112, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(20, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Svensk Sj\u00f6f\u00f6da AB", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return true;
                case 70:
                    Assert.AreEqual(37, p.ProductId);
                    Assert.AreEqual("Gravad lax", p.ProductName);
                    Assert.AreEqual("Gravad Lox", p.EnglishName);
                    Assert.AreEqual("12 - 500 g pkgs.", p.QuantityPerUnit);
                    Assert.AreEqual(26m, p.UnitPrice);
                    Assert.AreEqual(11, p.UnitsInStock);
                    Assert.AreEqual(50, p.UnitsOnOrder);
                    Assert.AreEqual(25, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Svensk Sj\u00f6f\u00f6da AB", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return true;
                case 71:
                    Assert.AreEqual(40, p.ProductId);
                    Assert.AreEqual("Boston Crab Meat", p.ProductName);
                    Assert.AreEqual("Boston Crab Meat", p.EnglishName);
                    Assert.AreEqual("24 - 4 oz tins", p.QuantityPerUnit);
                    Assert.AreEqual(18.4m, p.UnitPrice);
                    Assert.AreEqual(123, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(30, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("New England Seafood Cannery", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return true;
                case 72:
                    Assert.AreEqual(41, p.ProductId);
                    Assert.AreEqual("Jack's New England Clam Chowder", p.ProductName);
                    Assert.AreEqual("Jack's New England Clam Chowder", p.EnglishName);
                    Assert.AreEqual("12 - 12 oz cans", p.QuantityPerUnit);
                    Assert.AreEqual(9.65m, p.UnitPrice);
                    Assert.AreEqual(85, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(10, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("New England Seafood Cannery", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return true;
                case 73:
                    Assert.AreEqual(45, p.ProductId);
                    Assert.AreEqual("R\u00f8gede sild", p.ProductName);
                    Assert.AreEqual("Smoked Herring", p.EnglishName);
                    Assert.AreEqual("1k pkg.", p.QuantityPerUnit);
                    Assert.AreEqual(9.5m, p.UnitPrice);
                    Assert.AreEqual(5, p.UnitsInStock);
                    Assert.AreEqual(70, p.UnitsOnOrder);
                    Assert.AreEqual(15, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Lyngbysild", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return true;
                case 74:
                    Assert.AreEqual(46, p.ProductId);
                    Assert.AreEqual("Spegesild", p.ProductName);
                    Assert.AreEqual("Salt Herring", p.EnglishName);
                    Assert.AreEqual("4 - 450 g glasses", p.QuantityPerUnit);
                    Assert.AreEqual(12m, p.UnitPrice);
                    Assert.AreEqual(95, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(0, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Lyngbysild", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return true;
                case 75:
                    Assert.AreEqual(58, p.ProductId);
                    Assert.AreEqual("Escargots de Bourgogne", p.ProductName);
                    Assert.AreEqual("Escargots from Burgundy", p.EnglishName);
                    Assert.AreEqual("24 pieces", p.QuantityPerUnit);
                    Assert.AreEqual(13.25m, p.UnitPrice);
                    Assert.AreEqual(62, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(20, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Escargots Nouveaux", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return true;
                case 76:
                    Assert.AreEqual(73, p.ProductId);
                    Assert.AreEqual("R\u00f6d Kaviar", p.ProductName);
                    Assert.AreEqual("Red Caviar", p.EnglishName);
                    Assert.AreEqual("24 - 150 g jars", p.QuantityPerUnit);
                    Assert.AreEqual(15m, p.UnitPrice);
                    Assert.AreEqual(101, p.UnitsInStock);
                    Assert.AreEqual(0, p.UnitsOnOrder);
                    Assert.AreEqual(5, p.ReorderLevel);
                    Assert.AreEqual(false, p.Discontinued);
                    Assert.AreEqual("Svensk Sj\u00f6f\u00f6da AB", p.Supplier);
                    Assert.AreEqual("Seafood", p.Category);
                    return false;
                default:
                    Assert.Fail();
                    return default;
            }
        }
    }
}
